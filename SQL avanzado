/* BASE DE DATOS PAGILA */

/*
 distinct
*/

-- 604 resultados
select * from address;

-- 604 resultados
select district from address;

-- obtener distritos únicos 379 resultados
select distinct district from address;

-- 600 resultados
select first_name from customer;

-- 592 resultados
select distinct first_name from customer;


/*
 and, or, not
 order by
 
 and: se tienen que cumplir si o si las condiciones
 or: con que se cumpla una condición es suficiente
 not: niega una condición
*/
select * from address where district = 'California';
select * from address where district != 'California';
select * from address where not district = 'California';
select * from address where not district = 'California' order by district;

select * from address where district = 'Abu Dhabi' or district = 'California';

select * from address where district is not null order by district;
select * from address where not district = '' order by district;

select * from address where address2 is not null and address_id = 1 order by district;

/*
	group by
*/

select address_id, district from address;
select district, count(district) from address group by district;
select district, count(district) from address group by district order by district;
select district, count(district) as veces  from address group by district order by district;

SELECT * FROM actor;
SELECT last_name, count(last_name) from actor group by last_name;
SELECT last_name, count(last_name) from actor group by last_name HAVING count(last_name) > 1;

-- obtener en cuantas películas actúa cada actor:
select * from film_actor;
select * from film;

select f.title, count(fa.actor_id) from film f
inner join film_actor fa on f.film_id = fa.film_id
group by f.title

-- stock de una película en base a su título
select * from inventory;

select f.title, count(i.inventory_id) as unidades from film f
inner join inventory i on i.film_id = f.film_id
GROUP BY title;

select f.title, count(i.inventory_id) as unidades from film f
inner join inventory i on i.film_id = f.film_id
WHERE title = 'FICTION CHRISTMAS'
GROUP BY title;

select f.title, count(i.inventory_id) as unidades from film f
inner join inventory i on i.film_id = f.film_id
GROUP BY title ORDER BY unidades;

select f.title, count(i.inventory_id) as unidades from film f
inner join inventory i on i.film_id = f.film_id
GROUP BY title ORDER BY unidades DESC;

/*
 SUM()
 */
 select * from customer;
  select * from payment;

SELECT * FROM payment p
inner join customer c on p.customer_id = c.customer_id

SELECT c.email, count(p.payment_id) as num_pagos FROM payment p
inner join customer c on p.customer_id = c.customer_id
group by c.email

SELECT c.email, sum(p.amount) as num_pagos FROM payment p
inner join customer c on p.customer_id = c.customer_id
group by c.email

select * from staff;

select * from payment p
inner join staff s on p.staff_id = s.staff_id

select s.first_name, count(p.payment_id) as num_ventas, sum(p.amount) cantidad_ventas from payment p
inner join staff s on p.staff_id = s.staff_id
group by s.first_name


-- joins

select * from customer;
select * from address;
select * from city;
select * from country;

-- consulta a 2 tablas: customer y address

select first_name, last_name, customer.address_id from customer 
inner join address on customer.address_id = address.address_id

select * from customer c
inner join address a on c.address_id = a.address_id

select c.email, a.address from customer c
inner join address a on c.address_id = a.address_id

-- consulta a 3 tablas: customer, address, city
SELECT * FROM customer cu
INNER JOIN address a ON cu.address_id = a.address_id
INNER JOIN city ci ON a.city_id = ci.city_id

SELECT cu.email, a.address, ci.city  FROM customer cu
INNER JOIN address a ON cu.address_id = a.address_id
INNER JOIN city ci ON a.city_id = ci.city_id

-- consulta a 4 tablas: customer, address, city, country
SELECT *  FROM customer cu
INNER JOIN address a ON cu.address_id = a.address_id
INNER JOIN city ci ON a.city_id = ci.city_id
INNER JOIN country co ON ci.country_id = co.country_id

SELECT cu.email, a.address, ci.city, co.country  FROM customer cu
INNER JOIN address a ON cu.address_id = a.address_id
INNER JOIN city ci ON a.city_id = ci.city_id
INNER JOIN country co ON ci.country_id = co.country_id


/*
 Función concat()
*/
select * from actor;

select first_name, last_name from actor;

select concat(first_name, ' ', last_name) from actor;

select concat(first_name, ' ', last_name) as full_name from actor;

/*
 LIKE
*/
select * from film;

SELECT * from film WHERE description LIKE '%Monastery';
SELECT * from film WHERE description LIKE '%Drama%';

select * from actor

select * from actor where last_name like '%LI%';
-- Orden ascendente, empieza por el principio y va hasta el final
select * from actor where last_name like '%LI%' order by last_name;
-- Orden descendente, empieza por el final y va hasta el principio
select * from actor where last_name like '%LI%' order by last_name DESC;


/*
 IN
*/

select * from country;

select * from country where country = 'Spain';
select * from country where country = 'Spain' or country = 'Germany';
select * from country where country = 'Spain' or country = 'Germany' or country = 'France';

SELECT * FROM country WHERE country IN('Spain', 'Germany', 'France', 'Mexico');

select * from customer;

SELECT * FROM customer WHERE customer_id = 15;

SELECT * FROM customer WHERE customer_id IN(15, 16, 17, 18);


/*
 Sub queries
*/

select * from film;
select * from language;

select distinct language_id from film;

select * from film f
inner join language l on f.language_id = l.language_id 

select l.name, count(f.film_id) from film f
inner join language l on f.language_id = l.language_id 
group by l.name

-- Cambiar idioma a algunas películas
UPDATE film SET language_id = 2 WHERE film_id > 100 and film_id < 200;
UPDATE film SET language_id = 3 WHERE film_id >= 200 and film_id < 300;
UPDATE film SET language_id = 4 WHERE film_id >= 300 and film_id < 400;

SELECT title from film
where language_id = (SELECT language_id FROM language WHERE name = 'English')

SELECT title from film
where language_id IN (SELECT language_id FROM language WHERE name = 'English' or name = 'Italian')

-- peliculas más alquiladas

select * from rental;
select * from inventory;
select * from film;


SELECT * from film f
inner join (select * from inventory i
inner join rental r on r.inventory_id = i.inventory_id) res on res.film_id = f.film_id
 
SELECT f.title, count(f.film_id) as veces_alquilada from film f
inner join (select * from inventory i
inner join rental r on r.inventory_id = i.inventory_id) res on res.film_id = f.film_id
group by f.title
order by veces_alquilada DESC


/* BASE DE DATOS concesionario */

select * from customer;
select * from employee;
select * from extra;
select * from extra_version;
select * from manufacturer;
select * from model;
select * from sale;
select * from vehicle;
select * from version;

-- count ventas por empleado

INSERT INTO sale(sale_date, channel, id_vehicle, id_employee, id_customer)
VALUES('2022-01-01', 'Phone', 1, 1, 1);

select * from sale s
inner join employee e on s.id_employee = e.id

select e.name, count(s.id) from sale s
inner join employee e on s.id_employee = e.id
group by e.name

-- count compras por cliente
select c.email, count(s.id) from sale s
inner join customer c on s.id_customer = c.id
group by c.email

-- fabricante mas vendido
select * from sale;
select * from vehicle;
select * from manufacturer;

select * from sale s
inner join vehicle v on s.id_vehicle = v.id
inner join manufacturer m on v.id_manufacturer = m.id

select m.name, count(s.id) from sale s
inner join vehicle v on s.id_vehicle = v.id
inner join manufacturer m on v.id_manufacturer = m.id
group by m.name

-- modelo mas vendido

-- version mas vendido

-- extra vendido

-- ventas agrupando por año, mes, dia








/*
Importar base de datos:
1 - Crear base de datos northwind desde pgAdmin
2 - Ejecutar el comando para restaurar la base de datos:
	psql -U postgres -d northwind < northwind.sql
*/


/*
 Consultas de utilidad para explorar y administrar bases de datos y tablas
*/
-- Ver tamaño de las bases de datos
select pg_size_pretty (pg_database_size('northwind'))
select pg_size_pretty (pg_database_size('pagila'))

select pg_database.datname, pg_size_pretty (pg_database_size(pg_database.datname)) as size FROM pg_database;

-- ver tamaño de una tabla
select pg_size_pretty(pg_relation_size('orders'))

-- ver tamaño de las 10 tablas que más ocupan
SELECT
    relname AS "relation",
    pg_size_pretty (
        pg_total_relation_size (C .oid)
    ) AS "total_size"
FROM
    pg_class C
LEFT JOIN pg_namespace N ON (N.oid = C .relnamespace)
WHERE
    nspname NOT IN (
        'pg_catalog',
        'information_schema'
    )
AND C .relkind <> 'i'
AND nspname !~ '^pg_toast'
ORDER BY
    pg_total_relation_size (C .oid) DESC
LIMIT 10;


select current_schema();

select * from pg_matviews;

-- cargar extesiones
CREATE EXTENSION pgcrypto;

select * from employees
INSERT INTO employees (employee_id, last_name, first_name, notes) VALUES 
(11, 'em', 'Emp10', pgp_sym_encrypt('Emp10', 'password'))

SELECT employee_id, pgp_sym_decrypt(notes::bytea, 'password') as notes from employees;


/**
consultas joins
*/
select * from customers;
select * from orders;
select * from shippers;
select * from employees;

-- 1. INNER JOIN
select o.order_id, c.contact_name from orders o 
inner join customers c on o.customer_id = c.customer_id

select o.order_id, c.contact_name, s.company_name from orders o 
inner join customers c on o.customer_id = c.customer_id
inner join shippers s on o.ship_via = s.shipper_id

-- 2. LEFT JOIN
-- Fijarse en los resultados que aparecen 2 customers al final que no tienen order relacionada:
select c.contact_name, o.order_id from customers c 
left join orders o on c.customer_id = o.customer_id

select c.contact_name, o.order_id from customers c 
inner join orders o on c.customer_id = o.customer_id


-- 3. RIGHT JOIN
select o.order_id, e.first_name, e.last_name from orders o 
inner join employees e on o.employee_id = e.employee_id
-- Fijar que aparecen empleados sin order asociado
select o.order_id, e.first_name, e.last_name from orders o 
right join employees e on o.employee_id = e.employee_id

INSERT INTO employees (employee_id, last_name, first_name, title) VALUES 
(10, 'Emp10', 'Emp10', 'Director')


-- GROUP BY
select city, count(customer_id) as num_customers from customers group by city;
select city, count(customer_id) as num_customers from customers group by city order by city;
select city, count(customer_id) as num_customers from customers group by city order by num_customers;
select city, count(customer_id) as num_customers from customers group by city order by num_customers desc;

select country, count(customer_id) as num_customers from customers group by country order by num_customers desc;

select e.title, count(o.order_id) as num_orders  from orders o 
inner join employees e on o.employee_id = e.employee_id
group by e.title
order by num_orders desc

select e.first_name, e.last_name, count(o.order_id) as num_orders  from orders o 
inner join employees e on o.employee_id = e.employee_id
group by e.first_name, e.last_name
order by num_orders desc


/*
 vistas
 son una forma de guardar las consultas SQL bajo un identificador para ejecutarlas
 de manera más sencilla sin tener que repetir todo el código SQL
*/
create view num_orders_by_employee as
select e.first_name, e.last_name, count(o.order_id) as num_orders  from orders o 
inner join employees e on o.employee_id = e.employee_id
group by e.first_name, e.last_name
order by num_orders desc

select * from num_orders_by_employee;

/*
vistas materializadas
- guardan físicamente el resultado de una query y actualizan los datos periódicamente
- chachean el resultado de una query compleja y permiten refrescarlo
- para crear una vista materializada cargando datos tenemos la opción WITH DATA
CREATE MATERIALIZED VIEW [IF NOT EXISTS] view_name AS 
query
WITH [NO] DATA;
*/

create materialized view mv_num_orders_by_employee as
select e.first_name, e.last_name, count(o.order_id) as num_orders  from orders o 
inner join employees e on o.employee_id = e.employee_id
group by e.first_name, e.last_name
order by num_orders desc
with data

select * from mv_num_orders_by_employee;

select * from order_details;

create table example (
	id INT,
	name varchar
)

/**
 generate_series para generar datos de prueba
*/
select * from example

SELECT * FROM generate_series(1,10);

INSERT into example(id)
SELECT * FROM generate_series(1, 500000)


create materialized view mv_example as
select * from example
with data

select * from mv_example;

select * from generate_series(
	'2022-01-01 00:00'::timestamp,
	'2022-12-25 00:00',
	'6 hours'
)

/*
 EXPLAIN ANALYZE 
 permite mostrar el query planner y ver los tiempos: 
 */

EXPLAIN ANALYZE select * from order_details where unit_price < 9;
create index idx_order_details_unit_price on order_details(unit_price) where unit_price < 10;

EXPLAIN ANALYZE select * from num_orders_by_employee;
EXPLAIN ANALYZE select * from orders;

/* 
índices
Estructuras de datos que permiten optimizar las consultas en base a una columna o filtro en particular
con el fin de exitar escaneo secuencial de toda la tabla
*/
create index idx_orders_pk on orders(order_id);
EXPLAIN ANALYZE select * from orders;

EXPLAIN ANALYZE select * from example;
create index idx_example_pk on example(id);

EXPLAIN ANALYZE select * from example WHERE id = 456777;


/*
Particionamiento de tablas
Técnica que permite dividir una misma tabla en múltiples particiones con el objetivo de optimizar las consultas
Hay tres tipos:
- Rango
- Lista
- Hash
*/


-- Tabla base
CREATE TABLE users (
	id BIGSERIAL,
	birth_date DATE NOT NULL,
	first_name VARCHAR(20) NOT NULL,
	PRIMARY KEY(id, birth_date)
) PARTITION BY RANGE (birth_date);

-- particiones
CREATE TABLE users_2020 PARTITION OF users
FOR VALUES FROM ('2020-01-01') TO ('2021-01-01');

CREATE TABLE users_2021 PARTITION OF users
FOR VALUES FROM ('2021-01-01') TO ('2022-01-01');

CREATE TABLE users_2022 PARTITION OF users
FOR VALUES FROM ('2022-01-01') TO ('2023-01-01');

INSERT INTO users(birth_date, first_name) VALUES
('2020-01-15', 'User 1'),
('2020-06-15', 'User 2'),
('2021-02-15', 'User 3'),
('2021-11-15', 'User 4'),
('2022-04-15', 'User 5'),
('2022-12-15', 'User 6');

select * from users_2020;
select * from users_2021;
select * from users_2022;

EXPLAIN ANALYZE select * from users;
EXPLAIN ANALYZE select * from users where birth_date = '2020-06-15';
EXPLAIN ANALYZE select * from users where birth_date = '2021-02-15';
EXPLAIN ANALYZE select * from users where birth_date > '2021-02-14' and birth_date < '2022-12-16';
EXPLAIN ANALYZE select * from users where EXTRACT(month from birth_date) = 6 and EXTRACT(year from birth_date) = 2020


