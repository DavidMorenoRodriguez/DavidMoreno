CREATE DATABASE pagila;
DROP DATABASE pagila;


-- Creación de tablas
CREATE TABLE IF NOT EXISTS employees(
	id INT
);

-- ver datos de una tabla
SELECT * FROM employees;

-- Tipos de datos: boolean
CREATE TABLE IF NOT EXISTS employees(
	id INT,
	married BOOLEAN 
);

-- Insertar datos
INSERT INTO employees (id, married) VALUES (1, TRUE);
INSERT INTO employees (id, married) VALUES (2, FALSE);

-- Tipos de datos: CHAR, VARCHAR, TEXT
CREATE TABLE IF NOT EXISTS employees(
	id INT,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1)
);

INSERT INTO employees (id, married, name, genre) VALUES (1, TRUE, 'Juan', 'M');

-- Tipo de datos: NUMERIC
CREATE TABLE IF NOT EXISTS employees(
	id INT,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1),
	salary NUMERIC(9,2)
);
INSERT INTO employees (id, married, name, genre, salary) VALUES (1, TRUE, 'Juan', 'M', 29567.23);


-- Tipo de dato: DATE
CREATE TABLE IF NOT EXISTS employees(
	id INT,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE
);
INSERT INTO employees (id, married, name, genre, salary, birth_date) VALUES (1, TRUE, 'Juan', 'M', 29567.23, '1990-12-25');

-- Tipo de dato: TIME
CREATE TABLE IF NOT EXISTS employees(
	id INT,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE,
	start_at TIME
);
INSERT INTO employees (id, married, name, genre, salary, birth_date, start_at) 
VALUES (1, TRUE, 'Juan', 'M', 29567.23, '1990-12-25', '08:30:00');

-- Identificador
CREATE TABLE IF NOT EXISTS employees(
	id SERIAL,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE,
	start_at TIME
);
INSERT INTO employees (married, name, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Antonio', 'M', 29567.23, '1990-12-25', '08:30:00');

-- verificar que todavía sigue permitiendo insertar un id duplicado
INSERT INTO employees (id, married, name, genre, salary, birth_date, start_at) 
VALUES (1, TRUE, 'Antonio', 'M', 29567.23, '1990-12-25', '08:30:00');

-- Primary Key
CREATE TABLE IF NOT EXISTS employees(
	id SERIAL PRIMARY KEY,
	married BOOLEAN,
	name VARCHAR(250),
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE,
	start_at TIME
);

INSERT INTO employees (married, name, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Antonio', 'M', 29567.23, '1990-12-25', '08:30:00');

-- verificar que ya no permite insertar id duplicado
INSERT INTO employees (id, married, name, genre, salary, birth_date, start_at) 
VALUES (1, TRUE, 'Antonio', 'M', 29567.23, '1990-12-25', '08:30:00');

-- Hacer que un campo sea obligatorio con NOT NULL
CREATE TABLE IF NOT EXISTS employees(
	id SERIAL PRIMARY KEY,
	married BOOLEAN,
	name VARCHAR(250) NOT NULL,
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE,
	start_at TIME
);

-- Comprobar que no deja insertar el empleado sin ponerle un name
INSERT INTO employees (married, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'M', 29567.23, '1990-12-25', '08:30:00');

-- Hacer que un campo sea único con UNIQUE
CREATE TABLE IF NOT EXISTS employees(
	id SERIAL PRIMARY KEY,
	married BOOLEAN,
	name VARCHAR(250) NOT NULL,
	email VARCHAR(100) UNIQUE,
	genre CHAR(1),
	salary NUMERIC(9,2),
	birth_date DATE,
	start_at TIME
);
INSERT INTO employees (married, name, email, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Employee1', 'employee1@company.com', 'M', 29567.23, '1990-12-25', '08:30:00');

-- Verificar que da fallo por email repetido debería ser único
INSERT INTO employees (married, name, email, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Employee2', 'employee1@company.com', 'M', 29567.23, '1990-12-25', '08:30:00');

SELECT * FROM employees;

-- Restricciones en rangos de datos CHECK 
CREATE TABLE IF NOT EXISTS employees(
	id SERIAL PRIMARY KEY,
	married BOOLEAN,
	name VARCHAR(250) NOT NULL,
	email VARCHAR(100) UNIQUE,
	genre CHAR(1),
	salary NUMERIC(9,2) CHECK (salary >= 15000),
	birth_date DATE CHECK (birth_date > '1975-01-01'),
	start_at TIME
);

INSERT INTO employees (married, name, email, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Employee1', 'employee1@company.com', 'M', -1, '1990-12-25', '08:30:00');

INSERT INTO employees (married, name, email, genre, salary, birth_date, start_at) 
VALUES (TRUE, 'Employee1', 'employee2@company.com', 'M', 16000, '1960-12-25', '08:30:00');


-- Renombrar tabla
ALTER TABLE IF EXISTS employees RENAME TO employees_2021;

-- Agregar columnas a las tablas
ALTER TABLE employees ADD COLUMN email VARCHAR(100);

-- Borrar columnas de una tabla
ALTER TABLE employees DROP COLUMN IF EXISTS salary;

-- Borrar tabla
DROP TABLE IF EXISTS employees;




/* Sentencias DML: Data Manipulation Language
	CRUD: 
	
	Create (INSERT INTO)
	Read (SELECT FROM), 
	Update (UPDATE SET)
	Delete (DELETE FROM)
*/

-- 1. Consultas o recuperación de datos

SELECT * FROM employees;

SELECT id FROM employees;

SELECT id, email FROM employees;

SELECT email, id FROM employees;

SELECT id, email, salary FROM employees;

-- Filtrar filas
SELECT * FROM employees WHERE id = 1;

SELECT * FROM employees WHERE name = 'Employee1';

SELECT * FROM employees WHERE married = 'true';

SELECT * FROM employees WHERE married = TRUE;

SELECT * FROM employees WHERE birth_date = '1990-12-25';

SELECT * FROM employees WHERE married = TRUE AND salary > 10000;


-- 2. Inserción de datos

INSERT INTO employees(name, email) VALUES ('Juan', 'juan@company.com');

INSERT INTO employees(name, email, married, genre, salary) 
VALUES ('antonio4', 'antonio4@company.com', TRUE, 'M', 23566.43);

INSERT INTO employees(name, email, married, genre, salary, birth_date, start_at) 
VALUES ('francisco', 'francisco@company.com', TRUE, 'M', 23566.43, '1987-5-29', '10:00:00');

INSERT INTO employees(name, email, married, genre, salary, birth_date, start_at) 
VALUES ('Rosa', 'rosa@company.com', FALSE, 'F', 34543.43, '1990-5-29', '10:00:00');

INSERT INTO employees(name, email, married, genre, salary, birth_date, start_at) 
VALUES ('Alberto', 'alberto@company.com', FALSE, 'M', 32421.43, '1988-5-29', '10:00:00');

INSERT INTO employees
VALUES (9, TRUE, 'francisco3', 'francisco3@company.com', 'M', 23566.43, '1987-5-29', '10:00:00');


-- 3. Actualizar o editar

UPDATE employees SET birth_date = '2000-03-12';

UPDATE employees SET birth_date = '2000-03-12' WHERE id = 5;

UPDATE employees SET salary = 45000 WHERE email = 'juan@company.com';

UPDATE employees SET genre = 'M', start_at = '08:30:00' WHERE email = 'juan@company.com';

UPDATE employees SET genre = 'M', start_at = '08:30:00' WHERE email = 'noexiste@company.com';

UPDATE employees SET genre = 'M', start_at = '08:30:00' WHERE email = 'juan@company.com' RETURNING *;

UPDATE employees SET genre = NULL WHERE id = 14;

-- 4. Borrar
SELECT * FROM employees;

DELETE FROM employees;

DELETE FROM employees WHERE married = TRUE;

DELETE FROM employees WHERE salary < 33000;

DELETE FROM employees WHERE salary IS NULL;




-- Explorar tablas
SELECT * FROM actor;
SELECT * FROM actor WHERE last_name = 'WAHLBERG';

SELECT * FROM address;
SELECT * FROM address WHERE district = 'California';
SELECT * FROM address WHERE district = 'California' AND postal_code = '17886';
SELECT * FROM address WHERE district = 'California' AND postal_code = '17886' OR postal_code = '2299';
SELECT * FROM address WHERE postal_code = '17886' OR postal_code = '2299';

SELECT * FROM category;
SELECT * FROM category WHERE name = 'Action';

SELECT * FROM city;
SELECT * FROM city WHERE city = 'Akron';
SELECT * FROM city WHERE city LIKE 'A%';

SELECT * FROM country;
SELECT * FROM country WHERE country = 'Spain';

SELECT * FROM customer;
SELECT * FROM customer WHERE last_name = 'WILLIAMS';
SELECT * FROM customer WHERE activebool = FALSE;
SELECT * FROM customer WHERE activebool = TRUE;

UPDATE customer SET activebool = FALSE WHERE customer_id = 1;
UPDATE customer SET activebool = TRUE WHERE customer_id = 1;

SELECT * FROM film;
SELECT * FROM film WHERE description = 'A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies';
SELECT * FROM film WHERE description LIKE '%Drama%';

SELECT * FROM film_actor;
SELECT * FROM film_actor WHERE film_id = 1;
SELECT * FROM film_actor WHERE actor_id = 1;

SELECT * FROM film_category;

SELECT * FROM inventory;

SELECT * FROM language;
SELECT * FROM payment;
SELECT * FROM rental;
SELECT * FROM staff;
SELECT * FROM store;

-- insertar datos
select * from actor;

INSERT INTO actor (first_name, last_name) VALUES ('ALAN', 'SASTRE');


select * from customer;
select * from address;
select * from store;

INSERT INTO address (address, district, city_id, postal_code, phone)
VALUES ('Calle falsa', 'Nueva América', 300, '28004', '12334354352');

-- address 606

INSERT INTO customer(store_id, first_name, last_name, email, address_id, activebool, create_date)
VALUES (1, 'CUSTOMER NEW', 'LASTNAME EXAMPLE', 'customernew@company.com', 606, TRUE, '2021-12-1');






-- MANUFACTURER

CREATE TABLE manufacturer(
	id SERIAL,
	name VARCHAR(50) NOT NULL,
	num_employees INT,
	CONSTRAINT pk_manufacturer PRIMARY KEY(id)
);

SELECT * FROM manufacturer;

INSERT INTO manufacturer (name, num_employees)
VALUES ('Ford', 29000);

INSERT INTO manufacturer (name, num_employees)
VALUES ('Toyota', 45000);

-- MODEL

CREATE TABLE model(
	id SERIAL,
	name VARCHAR(50) NOT NULL,
	id_manufacturer INT,
	CONSTRAINT pk_model PRIMARY KEY(id),
	CONSTRAINT fk_model_manufacturer FOREIGN KEY(id_manufacturer) REFERENCES manufacturer(id)
);

SELECT * FROM model;

INSERT INTO model (name, id_manufacturer)
VALUES ('Mondeo', 1);

INSERT INTO model (name, id_manufacturer)
VALUES ('Fiesta', 1);

INSERT INTO model (name, id_manufacturer)
VALUES ('Prius', 2);

-- VERSION

CREATE TABLE version(
	id SERIAL,
	name VARCHAR(50) NOT NULL,
	engine VARCHAR(50),
	price NUMERIC,
	cc NUMERIC(2,1),
	id_model INT,
	CONSTRAINT pk_version PRIMARY KEY(id),
	CONSTRAINT fk_version_model FOREIGN KEY(id_model) REFERENCES model(id) ON UPDATE set null ON DELETE set null
);

SELECT * FROM version;

INSERT INTO version (name, engine, price, cc, id_model) VALUES ('Basic', 'Diesel 4C', 30000, 1.9, 2);
INSERT INTO version (name, engine, price, cc, id_model) VALUES ('Medium', 'Diesel 5C', 50000, 2.2, 2);
INSERT INTO version (name, engine, price, cc, id_model) VALUES ('Advance', 'Diesel 6C V', 80000, 3.2, 2);

INSERT INTO version (name, engine, price, cc, id_model) VALUES ('Sport', 'Gasolina 4C', 50000, 2.1, 3);
INSERT INTO version (name, engine, price, cc, id_model) VALUES ('Sport advance', 'Gasolina 8C', 90000, 3.2, 3);

-- EXTRA
CREATE TABLE extra(
	id SERIAL,
	name VARCHAR(50) NOT NULL,
	description VARCHAR(300),
	CONSTRAINT pk_extra PRIMARY KEY(id)
);

CREATE TABLE extra_version (
	id_version INT,
	id_extra INT,
	price NUMERIC NOT NULL CHECK (price >= 0),
	CONSTRAINT pk_extra_version PRIMARY KEY(id_version, id_extra),
	CONSTRAINT fk_version_extra FOREIGN KEY(id_version) REFERENCES version(id) ON UPDATE cascade ON DELETE cascade,
	CONSTRAINT fk_extra_version FOREIGN KEY(id_extra) REFERENCES extra(id) ON UPDATE cascade ON DELETE cascade
);

INSERT INTO extra (name, description)
VALUES ('Techo solar', 'Techo solar flamante lorem ipsum dolor ...');

INSERT INTO extra (name, description)
VALUES ('Climatizador', 'lorem ipsum dolor ...');

INSERT INTO extra (name, description)
VALUES ('WiFi', 'lorem ipsum dolor ...');

INSERT INTO extra (name, description)
VALUES ('Frigorífico', 'lorem ipsum dolor ...');

SELECT * FROM extra;

SELECT * FROM extra_version;

-- Ford Mondeo Basic techo solar
INSERT INTO extra_version VALUES (1, 1, 3000);
-- Ford Mondeo Basic climatizador
INSERT INTO extra_version VALUES (1, 2, 1000);
-- Ford Mondeo Basic WiFi
INSERT INTO extra_version VALUES (1, 3, 500);

-- Ford Mondeo Advance techo solar
INSERT INTO extra_version VALUES (3, 1, 3300);
-- Ford Mondeo Advance climatizador
INSERT INTO extra_version VALUES (3, 2, 1200);
-- Ford Mondeo Advance WiFi
INSERT INTO extra_version VALUES (3, 3, 500);

CREATE TABLE employee(
	id SERIAL,
	name VARCHAR(30),
	nif VARCHAR(9) NOT NULL UNIQUE,
	phone VARCHAR(9),
	CONSTRAINT pk_employee PRIMARY KEY(id)
);

INSERT INTO employee(name, nif, phone) VALUES('Bob', '123456789', '111111111');
INSERT INTO employee(name, nif, phone) VALUES('Mike', '123456781', '111111112');
SELECT * FROM employee;

CREATE TABLE customer(
	id SERIAL,
	name VARCHAR(30),
	email VARCHAR(50) NOT NULL UNIQUE,
	CONSTRAINT pk_customer PRIMARY KEY(id)
);

INSERT INTO customer(name, email) VALUES('customer1', 'c1@gmail.com');
INSERT INTO customer(name, email) VALUES('customer2', 'c2@gmail.com');
SELECT * FROM customer;

CREATE TABLE vehicle(
	id SERIAL,
	license_num VARCHAR (7),
	creation_date DATE,
	price_gross NUMERIC,
	price_net NUMERIC,
	type VARCHAR(30),
	
	id_manufacturer INT,
	id_model INT,
	id_version INT,
	id_extra INT,
	
	CONSTRAINT pk_vehicle PRIMARY KEY(id),
	CONSTRAINT fk_vehicle_manufacturer FOREIGN KEY (id_manufacturer) REFERENCES manufacturer(id),
	CONSTRAINT fk_vehicle_model FOREIGN KEY (id_model) REFERENCES model(id),
	CONSTRAINT fk_vehicle_extra_version FOREIGN KEY (id_version, id_extra) REFERENCES extra_version(id_version, id_extra)
);

SELECT * FROM vehicle;
SELECT * FROM manufacturer;
SELECT * FROM model;
SELECT * FROM extra_version;
SELECT * FROM vehicle;

INSERT INTO vehicle (license_num, price_gross, id_manufacturer, id_model, id_version, id_extra)
VALUES ('1234LLL', 40000, 1, 2, 1, 2);

INSERT INTO vehicle (license_num, price_gross, id_manufacturer, id_model, id_version, id_extra)
VALUES ('3456EEE', 60000, 1, 3, 3, 3);

CREATE TABLE sale(
	id SERIAL,
	sale_date DATE,
	channel VARCHAR(300),
	
	id_vehicle INT,
	id_employee INT,
	id_customer INT, 
	
	CONSTRAINT pk_sale PRIMARY KEY(id),
	CONSTRAINT fk_sale_vehicle FOREIGN KEY (id_vehicle) REFERENCES vehicle(id),
	CONSTRAINT fk_sale_employee FOREIGN KEY (id_employee) REFERENCES employee(id),
	CONSTRAINT fk_sale_customer FOREIGN KEY (id_customer) REFERENCES customer(id)
);

INSERT INTO sale(sale_date, channel, id_vehicle, id_employee, id_customer)
VALUES('2022-01-01', 'Phone', 1, 1, 1);

SELECT * FROM sale;
